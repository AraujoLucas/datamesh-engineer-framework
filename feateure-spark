listvalues = ['1000','1001','1002']
set_values = set(listvalues)

# Aplicar o filtro combinado
df_filtered = df_lc.filter((df_lc.sbcontar == '1000') & (~df_lc.cdp.isin(set_values)))

# Transformações para seleção e criação de colunas
df_filtered = df_filtered.withColumn('dt_mv_f', to_date(col('dt_mv'), 'yyyyMMdd')) \
    .withColumn('agcc', concat(lpad(col('ag'), 4, '0'), lpad(col('cc'), 7, '0'))) \
    .withColumn('qntd', count('val15').cast('integer')) \
    .withColumn('sum', round(sum('val15'), 2)) \
    .withColumn('mm', round(avg('val15'), 2)) \
    .withColumn('md', round(expr(percentile_approx('val15', 0.5)), 2)) \
    .withColumn('dvp', round(stddev('val15'), 2)) \
    .withColumn('mx', round(max('val15'), 2)) \
    .withColumn('mn', round(min('val15'), 2)) \
    .fillna(0)

# Adicionar colunas de data
df_filtered = df_filtered.withColumn('anomesdia', date_format(col('dt_mv_f'), 'yyyyMMdd').cast('integer')) \
    .withColumn('mes', month(col('dt_mv_f')).cast('integer')) \
    .withColumn('ano', year(col('dt_mv_f')).cast('integer'))

# Agrupar e realizar as agregações
df_grouped = df_filtered.groupBy('agcc', 'dc', 'comp', 'anomesdia', 'week', 'mes', 'ano') \
    .agg(
        sum('qntd').alias('qntd'),
        sum('sum').alias('sum'),
        avg('mm').alias('mm'),
        expr('percentile_approx(sum, 0.5)').alias('md'),
        stddev('dvp').alias('dvp'),
        max('mx').alias('mx'),
        min('mn').alias('mn')
    )

# Exibir o resultado
df_grouped.show()
